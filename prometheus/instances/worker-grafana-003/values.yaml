global:
  imageRegistry: "registry.crisp.rbro.rbg.cc/devops"
  dnsService: "rke2-coredns-rke2-coredns"
  security:
    allowInsecureImages: true

crisp:
  storageClass: &crisp_storageClass "local-path"

kube-prometheus-stack:
  defaultRules:
    labels:
      role: crisp-rules
    create: true
  #   rules:
  #     alertmanager: false
  #     etcd: false
  #     configReloaders: false
  #     general: false
  #     k8s: false
  #     kubeApiserverAvailability: false
  #     kubeApiserverBurnrate: false
  #     kubeApiserverHistogram: false
  #     kubeApiserverSlos: false
  #     kubeControllerManager: false
  #     kubelet: false
  #     kubeProxy: false
  #     kubePrometheusGeneral: false
  #     kubePrometheusNodeRecording: false
  #     kubernetesApps: false
  #     kubernetesResources: false
  #     kubernetesStorage: false
  #     kubernetesSystem: false
  #     kubeSchedulerAlerting: false
  #     kubeSchedulerRecording: false
  #     kubeStateMetrics: false
  #     network: false
  #     node: false
  #     nodeExporterAlerting: false
  #     nodeExporterRecording: false
  #     prometheus: false
  #     prometheusOperator: false
  nodeSelector:
    kubernetes.io/os: linux
    ReservedFor: monitoring

  tolerations:
    - key: "ForMonitoring"
      operator: "Equal"
      value: "true"

  kubelet:
    enabled: true
    serviceMonitor:
      https: true

  kubeControllerManager:
    enabled: false
  kubeScheduler:
    enabled: false
  kubeEtcd:
    enabled: false
  kubeProxy:
    enabled: false

  grafana:
    enabled: false

  prometheusOperator:
    nodeSelector:
      kubernetes.io/os: linux
      ReservedFor: monitoring

    tolerations:
      - key: "ForMonitoring"
        operator: "Equal"
        value: "true"

    admissionWebhooks:
      patch:
        nodeSelector:
          kubernetes.io/os: linux
          ReservedFor: monitoring

        tolerations:
          - key: "ForMonitoring"
            operator: "Equal"
            value: "true"

  kube-state-metrics:
    nodeSelector:
      kubernetes.io/os: linux
      ReservedFor: monitoring

    tolerations:
      - key: "ForMonitoring"
        operator: "Equal"
        value: "true"

    extraArgs:
      - --metric-labels-allowlist=nodes=[agentpool,kubernetes.azure.com/agentpool,kubernetes.io/hostname,beta.kubernetes.io/os,node.kubernetes.io/instance-type,topology.kubernetes.io/region,topology.kubernetes.io/zone,topology.disk.csi.azure.com/zone,kubernetes.azure.com/os-sku],pods=[app.kubernetes.io/name,app.kubernetes.io/version],deployments=[app.kubernetes.io/name,app.kubernetes.io/version],daemonsets=[app.kubernetes.io/name,app.kubernetes.io/version],statefulsets=[app.kubernetes.io/name,app.kubernetes.io/version]

    customResourceState: 
      enabled: true

  additionalPrometheusRules:

  prometheus:
    prometheusSpec:
      replicas: 1
      serviceMonitorSelectorNilUsesHelmValues: "false"
      podMonitorSelectorNilUsesHelmValues: "false"
      ruleSelectorNilUsesHelmValues: "true"
      ruleSelector:
        matchLabels:
          role: crisp-rules
      nodeSelector:
        kubernetes.io/os: linux
        ReservedFor: monitoring

      tolerations:
        - key: "ForMonitoring"
          operator: "Equal"
          value: "true"

      # retension policy
      retention: 168h
      retentionSize: 50GiB

      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: *crisp_storageClass
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 50Gi

      enableFeatures:
      - exemplar-storage

      # additionalScrapeConfigsSecret:
      #   enabled: true
      # additionalScrapeConfigs:
      #   name: crisp-additional-scrape-config
      #   key: additional-scrape-configs.yaml
      additionalScrapeConfigs:
        ## Monitor external services
        - job_name: 'blackbox-external-sit-readiness'
          # How often Prometheus should ask Blackbox Exporter to probe these targets
          scrape_interval: 60s
          # How long Prometheus will wait for Blackbox Exporter to respond
          scrape_timeout: 30s
          metrics_path: /probe # Standard Blackbox Exporter endpoint
          params:
            module: [http_sit_readiness]  # Tells Blackbox Exporter to use our new module
          static_configs:
            - targets:
              - https://rbipom-cloud.sit.crisp.rbro.rbg.cc/pom-sct/v1/pod/readiness
              - https://rbifxs-cloud.sit.crisp.rbro.rbg.cc/fxs/v1/pod/readiness
              - https://rbipcs-cloud.sit.crisp.rbro.rbg.cc/pcs/v1/pod/readiness
              - https://rbicas-cloud.sit.crisp.rbro.rbg.cc/cas/v1/pod/readiness
              - https://rbifsis-cloud.sit.crisp.rbro.rbg.cc/fsis/v1/pod/readiness
              - https://rbixct-cloud.sit.crisp.rbro.rbg.cc/xctrest/webapi/v1/probes/ready
              - https://rbisepa-cloud.sit.crisp.rbro.rbg.cc/opfrest/webapi/v1/probes/ready
              - https://rbicbis-cloud.sit.crisp.rbro.rbg.cc/cbis/api/operations/v4/healthunsecured
              - https://rbipom-cloud.uat.crisp.rbro.rbg.cc/pom-sct/v1/pod/readiness
              - https://rbifxs-cloud.uat.crisp.rbro.rbg.cc/fxs/v1/pod/readiness
              - https://rbipcs-cloud.uat.crisp.rbro.rbg.cc/pcs/v1/pod/readiness
              - https://rbicas-cloud.uat.crisp.rbro.rbg.cc/cas/v1/pod/readiness
              - https://rbifsis-cloud.uat.crisp.rbro.rbg.cc/fsis/v1/pod/readiness
              - https://rbixct-cloud.uat.crisp.rbro.rbg.cc/xctrest/webapi/v1/probes/ready
              - https://rbisepa-cloud.uat.crisp.rbro.rbg.cc/opfrest/webapi/v1/probes/ready
              - https://rbicbis-cloud.uat.crisp.rbro.rbg.cc/cbis/api/operations/v4/healthunsecured
          relabel_configs:
            # 1. Save address in a separate label
            - source_labels: [__address__]
              target_label: __param_target

            # 2. Save module in an module label since __param_module is going to be dropped
            - source_labels: [module]
              target_label: __param_module

            # 3. Save module in an module label since __param_target is going to be dropped
            - source_labels: [__param_target]
              target_label: instance

            # 4. Replace address with an internal blackbox service so scraper is always pointed at blackbox-exporter
            - target_label: __address__
              replacement: prometheus-test-prometheus-blackbox-exporter:9115
            # Ingress annotation for disableing checks - monitoring/exclude: true
            - source_labels: [__meta_kubernetes_ingress_annotation_monitoring_exclude]
              regex: "true"
              action: drop

    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: nginx
      hosts:
        - prometheus.XXX.crisp-devops.322.c21.YYY.provides.io
      paths:
        - "/"

    additionalServiceMonitors:

  alertmanager:
    alertmanagerSpec:
      replicas: 1
      nodeSelector:
        kubernetes.io/os: linux
        ReservedFor: monitoring

      tolerations:
        - key: "ForMonitoring"
          operator: "Equal"
          value: "true"

    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: nginx
      hosts:
        - alertmanager.XXX.crisp-devops.322.c21.YYY.provides.io
      paths:
        - "/"
    config:
      global:
        resolve_timeout: 1m
      receivers:
      - name: prometheus-msteams
        webhook_configs:
        - url: "http://prometheus-msteams:2000/jenkins"
          send_resolved: true
      - name: prometheus-msteams-critical
        webhook_configs:
        - url: "http://prometheus-msteams:2000/critical"
          send_resolved: true
      route:
        group_by:
        - job
        group_interval: 1m
        group_wait: 30s
        receiver: prometheus-msteams
        repeat_interval: 8h
        routes:
        - match:
            severity: critical
          receiver: prometheus-msteams-critical
        - match:
            severity: warning
          receiver: prometheus-msteams
        - match:
            severity: high
          receiver: prometheus-msteams
        - match:
            job: kube-state-metrics
          receiver: prometheus-msteams

  prometheus-node-exporter:
    image:
      registry: "registry.crisp.rbro.rbg.cc/devops"
    nodeSelector:
      kubernetes.io/os: linux
      beta.kubernetes.io/os: linux
    tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Equal"
        value: "true"

prometheus-blackbox-exporter:
  enabled: true

  restartPolicy: Always

  kind: Deployment

  podDisruptionBudget: {}
    # maxUnavailable: 0

  ## Enable pod security policy
  pspEnabled: true

  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistrKeySecretName

  ## User to run blackbox-exporter container as
  runAsUser: 1000
  readOnlyRootFilesystem: true
  runAsNonRoot: true

  livenessProbe:
    httpGet:
      path: /health
      port: http

  readinessProbe:
    httpGet:
      path: /health
      port: http

  nodeSelector:
    kubernetes.io/os: linux
    ReservedFor: monitoring

  tolerations:
    - key: "ForMonitoring"
      operator: "Equal"
      value: "true"

  affinity: {}

  secretConfig: false

  config:
    modules:
      http_sit_readiness:
        prober: http
        timeout: 20s
        http:
          follow_redirects: true
          valid_http_versions: 
            - "HTTP/1.1"
            - "HTTP/2.0"
          preferred_ip_protocol: "ip4"
          valid_status_codes:
            - 200
            - 204
            - 302
          tls_config:
            insecure_skip_verify: true

  extraConfigmapMounts: []
    # - name: crisp.rbro.rbg.cc
    #   mountPath: /etc/secrets/ssl
    #   configMap: crisp.rbro.rbg.cc
    #   readOnly: true
    #   defaultMode: 420

  ## Additional secret mounts
  # Defines additional mounts with secrets. Secrets must be manually created in the namespace.
  extraSecretMounts: []
    # - name: secret-files
    #   mountPath: /etc/secrets
    #   secretName: blackbox-secret-files
    #   readOnly: true
    #   defaultMode: 420

  allowIcmp: false

  resources: {}
    # limits:
    #   memory: 300Mi
    # requests:
    #   memory: 50Mi

  priorityClassName: ""

  service:
    annotations: {}
    labels: {}
    type: ClusterIP
    port: 9115

  serviceAccount:
    # Specifies whether a ServiceAccount should be created
    create: true
    # The name of the ServiceAccount to use.
    # If not set and create is true, a name is generated using the fullname template
    name:
    annotations: {}

  ## An Ingress resource can provide name-based virtual hosting and TLS
  ## termination among other things for CouchDB deployments which are accessed
  ## from outside the Kubernetes cluster.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/

  ingress:
    enabled: false
    className: ""
    labels: {}
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: blackbox.test.crisp.rbro.rbg.cc
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  podAnnotations: {}

  pod:
    labels: {}

  extraArgs: []
  #  --history.limit=1000

  replicas: 1

  serviceMonitor:
    ## If true, a ServiceMonitor CRD is created for a prometheus operator
    ## https://github.com/coreos/prometheus-operator
    ##
    enabled: false

    # Default values that will be used for all ServiceMonitors created by `targets`
    defaults:
      additionalMetricsRelabels: {}
      labels: {}
      interval: 30s
      scrapeTimeout: 30s
      module: http_sit_readiness

  ## Custom PrometheusRules to be defined
  ## ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions
  prometheusRule:
    enabled: false
    additionalLabels: {}
    namespace: ""
    rules: []

  ## Network policy for chart
  networkPolicy:
    # Enable network policy and allow access from anywhere
    enabled: false
    # Limit access only from monitoring namespace
    allowMonitoringNamespace: false

  ## dnsPolicy and dnsConfig for Deployments and Daemonsets if you want non-default settings.
  ## These will be passed directly to the PodSpec of same.
  dnsPolicy:
  dnsConfig:
    # nameservers:
    #   - 10.241.200.1
    #   - 10.241.200.2
    #   - 10.241.200.3

prometheus-msteams:
  image:
    repository: registry.crisp.rbro.rbg.cc/devops/prometheusmsteams/prometheus-msteams
    tag: v1.5.2
  replicaCount: 1
  nodeSelector:
    kubernetes.io/os: linux
    ReservedFor: monitoring

  tolerations:
    - key: "ForMonitoring"
      operator: "Equal"
      value: "true"

  connectors:
    - crispalerts: https://crisp.webhook.office.com/webhookb2/7c4ed006-b19b-4dea-a330-680e4b10713b@0b9b90da-3fe1-457a-b340-f1b67e1024fb/IncomingWebhook/5eb8afbdbb674180ba7bcb6d1a6d8a23/3852c014-1957-4b5c-b0c9-ce564a314a53/V27LZ6toJsfqMTmkRJ98UMCLVbpocqyBnKel_AXfIuseE1

  # Enable metrics for prometheus operator
  metrics:
    serviceMonitor:
      enabled: true
      additionalLabels:
        release: prometheus
      scrapeInterval: 30s

promtail:
  enabled: true
  config:
    logLevel: info
    serverPort: 3101
    clients:
      - url: http://prometheus-XXX-loki-gateway/loki/api/v1/push
    scrape_configs:
      - job_name: kubernetes-pods
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_phase]
            action: drop
            regex: "Succeeded|Failed"
  nodeSelector:
    kubernetes.io/os: linux

  tolerations:
    - key: "CriticalAddonsOnly"
      operator: "Equal"
      value: "true"
    - key: "ForMonitoring"
      operator: "Equal"
      value: "true"

loki:
  enabled: true
  loki:
    image: 
      registry: registry.crisp.rbro.rbg.cc/devops

    nodeSelector:
      kubernetes.io/os: linux
      ReservedFor: monitoring 

    tolerations:
      - key: "ForMonitoring"
        operator: "Equal"
        value: "true"

    auth_enabled: false
    schemaConfig:
      configs:
        - from: 2024-04-01
          store: tsdb
          object_store: s3
          schema: v13
          index:
            prefix: loki_index_
            period: 24h
    ingester:
      chunk_idle_period: 10m
      chunk_retain_period: 30m
      chunk_encoding: snappy
    pattern_ingester:
      enabled: true
    tracing:
      enabled: true
    querier:
      # Default is 4, if you have enough memory and CPU you can increase, reduce if OOMing
      max_concurrent: 16
    server:
      log_level: info
      grpc_server_max_recv_msg_size: 8388608
      grpc_server_max_send_msg_size: 8388608
      http_server_read_timeout: 5m
      register_instrumentation: true
    limits_config:
      max_label_name_length: 1024
      max_label_value_length: 4096
      max_streams_per_user: 500000
      max_global_streams_per_user: 500000
      max_entries_limit_per_query: 500000
      max_query_length: 168h
      max_query_parallelism: 32
      max_query_lookback: 168h
      per_stream_rate_limit: 10m
      per_stream_rate_limit_burst: 20m
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      ingestion_rate_mb: 64
      ingestion_burst_size_mb: 128
      query_timeout: 5m
      max_cache_freshness_per_query: 10m
      volume_enabled: true
      retention_period: 168h

  memcached:
    image:
      repository: registry.crisp.rbro.rbg.cc/devops/memcached
  memcachedExporter:
    image:
      repository: registry.crisp.rbro.rbg.cc/devops/prom/memcached-exporter
  sidecar:
    image:
      repository: registry.crisp.rbro.rbg.cc/devops/kiwigrid/k8s-sidecar
  resultsCache:
    replicas: 2
    nodeSelector:
      kubernetes.io/os: linux
      ReservedFor: monitoring 
    tolerations:
      - key: "ForMonitoring"
        operator: "Equal"
        value: "true"
  chunksCache:
    replicas: 2
    nodeSelector:
      kubernetes.io/os: linux
      ReservedFor: monitoring 
    tolerations:
      - key: "ForMonitoring"
        operator: "Equal"
        value: "true"

  gateway:
    image:
      registry: registry.crisp.rbro.rbg.cc/devops
    nodeSelector:
      kubernetes.io/os: linux
      ReservedFor: monitoring 
    tolerations:
      - key: "ForMonitoring"
        operator: "Equal"
        value: "true"
    replicas: 2
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 6
    ingress:
      enabled: true
      ingressClassName: ""
      annotations:
        kubernetes.io/ingress.class: nginx
        # nginx.ingress.kubernetes.io/rewrite-target: /$2
      labels: {}
      hosts:
        - host: loki-gateway.XXX.crisp-devops.322.c21.YYY.provides.io
          paths:
            - path: /
              pathType: Prefix
            # - path: /()(loki.*)
            #   pathType: ImplementationSpecific

  deploymentMode: Distributed

  lokiCanary:
    image:
      registry: registry.crisp.rbro.rbg.cc/devops
    nodeSelector:
      kubernetes.io/os: linux
      ReservedFor: monitoring 
    tolerations:
      - key: "ForMonitoring"
        operator: "Equal"
        value: "true"

  backend:
    image:
      registry: registry.crisp.rbro.rbg.cc/devops
    nodeSelector:
      kubernetes.io/os: linux
      ReservedFor: monitoring 
    tolerations:
      - key: "ForMonitoring"
        operator: "Equal"
        value: "true"
    enabled: true
    replicas: 0
    persistence:
      storageClass: *crisp_storageClass
  read:
    image:
      registry: registry.crisp.rbro.rbg.cc/devops
    nodeSelector:
      kubernetes.io/os: linux
      ReservedFor: monitoring 
    tolerations:
      - key: "ForMonitoring"
        operator: "Equal"
        value: "true"
    enabled: true
    replicas: 0
    persistence:
      storageClass: *crisp_storageClass
  write:
    image:
      registry: registry.crisp.rbro.rbg.cc/devops
    nodeSelector:
      kubernetes.io/os: linux
      ReservedFor: monitoring 
    tolerations:
      - key: "ForMonitoring"
        operator: "Equal"
        value: "true"
    enabled: true
    replicas: 0
    persistence:
      storageClass: *crisp_storageClass

  # Enable minio for storage
  minio:
    image:
      repository: registry.crisp.rbro.rbg.cc/devops/minio/minio
    mcImage:
      repository: registry.crisp.rbro.rbg.cc/devops/minio/mc
    nodeSelector:
      kubernetes.io/os: linux
      ReservedFor: monitoring 
    tolerations:
      - key: "ForMonitoring"
        operator: "Equal"
        value: "true"
    enabled: true
    replicas: 2
    persistence:
      storageClass: *crisp_storageClass
      size: 50Gi
    postJob:
      nodeSelector:
        kubernetes.io/os: linux
        ReservedFor: monitoring 
      tolerations:
        - key: "ForMonitoring"
          operator: "Equal"
          value: "true"

  # Zero out replica counts of other deployment modes
  singleBinary:
    image:
      registry: registry.crisp.rbro.rbg.cc/devops
    replicas: 0

  ingester:
    replicas: 2
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 6
    nodeSelector:
      kubernetes.io/os: linux
      ReservedFor: monitoring 
    tolerations:
      - key: "ForMonitoring"
        operator: "Equal"
        value: "true"
  querier:
    replicas: 2
    maxUnavailable: 1
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 6
    nodeSelector:
      kubernetes.io/os: linux
      ReservedFor: monitoring 
    tolerations:
      - key: "ForMonitoring"
        operator: "Equal"
        value: "true"
  frontend:
    cache_results: true
    results_cache:
      cache:
        enable_fifocache: true
        fifocache:
          max_size_items: 10240
          validity: 1h

  query_range:
    max_query_length: 168h  # 7 days
    max_retries: 5
    parallelise_shardable_queries: true
    align_queries_with_step: true
    results_cache:
      cache:
        enable_fifocache: true
        fifocache:
          max_size_items: 10240
          validity: 1h

  queryFrontend:
    replicas: 2
    maxUnavailable: 1
    nodeSelector:
      kubernetes.io/os: linux
      ReservedFor: monitoring 
    tolerations:
      - key: "ForMonitoring"
        operator: "Equal"
        value: "true"
  queryScheduler:
    replicas: 2
    nodeSelector:
      kubernetes.io/os: linux
      ReservedFor: monitoring 
    tolerations:
      - key: "ForMonitoring"
        operator: "Equal"
        value: "true"
  distributor:
    replicas: 2
    maxUnavailable: 1
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 6
    nodeSelector:
      kubernetes.io/os: linux
      ReservedFor: monitoring 
    tolerations:
      - key: "ForMonitoring"
        operator: "Equal"
        value: "true"
  compactor:
    replicas: 2
    working_directory: /data/retention
    compaction_interval: 10m
    retention_enabled: true
    retention_delete_delay: 2h
    retention_delete_worker_count: 150
    delete_request_store: s3
    nodeSelector:
      kubernetes.io/os: linux
      ReservedFor: monitoring 
    tolerations:
      - key: "ForMonitoring"
        operator: "Equal"
        value: "true"
  indexGateway:
    replicas: 2
    maxUnavailable: 1
    nodeSelector:
      kubernetes.io/os: linux
      ReservedFor: monitoring 
    tolerations:
      - key: "ForMonitoring"
        operator: "Equal"
        value: "true"
  bloomCompactor:
    replicas: 0
  bloomGateway:
    replicas: 0

  ruler:
    enabled: true
    replicas: 2
    maxUnavailable: 1
    nodeSelector:
      kubernetes.io/os: linux
      ReservedFor: monitoring 
    tolerations:
      - key: "ForMonitoring"
        operator: "Equal"
        value: "true"

    rule_path: /rules
    enable_api: true
    storage:
      type: local
    ring:
      kvstore:
        store: memberlist

kubernetes-event-exporter:
  enabled: false

  nodeSelector:
    kubernetes.io/os: linux
    ReservedFor: monitoring
  tolerations:
    - key: "ForMonitoring"
      operator: "Equal"
      value: "true"
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s

  # config:
  #   logLevel: info
  #   route:
  #     routes:
  #       - match:
  #         - receiver: prometheus
  #         receivers:
  #           - name: prometheus
  #   receivers:
  #     - name: prometheus
  #       type: prometheus

monitor:
  argocd:
    enabled: false
  jenkins: 
    enabled: false