cert-manager:
  global:
    imagePullSecrets: []
    priorityClassName: ""
    rbac:
      create: true
      aggregateClusterRoles: true

    podSecurityPolicy:
      enabled: false
      useAppArmor: true

    logLevel: 2

    leaderElection:
      # Override the namespace used to store the ConfigMap for leader election
      namespace: "cert-manager"

  installCRDs: true

  replicaCount: 1

  strategy: {}

  featureGates: ""

  image:
    repository: quay.io/jetstack/cert-manager-controller

    pullPolicy: IfNotPresent

  clusterResourceNamespace: ""

  serviceAccount:
    create: true
    automountServiceAccountToken: true

  extraArgs: []

  extraEnv: []

  resources: {}

  securityContext:
    runAsNonRoot: true

  containerSecurityContext:
    allowPrivilegeEscalation: false

  volumes: []

  volumeMounts: []

  podLabels: {}

  nodeSelector:
    kubernetes.io/os: linux

  ingressShim: {}

  prometheus:
    enabled: true
    servicemonitor:
      enabled: false
      prometheusInstance: default
      targetPort: 9402
      path: /metrics
      interval: 60s
      scrapeTimeout: 30s
      labels: {}
      honorLabels: false

  affinity: {}

  tolerations: []

  webhook:
    replicaCount: 1
    timeoutSeconds: 10

    config:

    strategy: {}

    securityContext:
      runAsNonRoot: true

    containerSecurityContext:
      allowPrivilegeEscalation: false

    extraArgs: []

    resources: {}

    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 60
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1

    nodeSelector:
      kubernetes.io/os: linux

    affinity: {}

    tolerations: []

    podLabels: {}

    serviceLabels: {}

    image:
      repository: quay.io/jetstack/cert-manager-webhook
      pullPolicy: IfNotPresent

    serviceAccount:
      # Specifies whether a service account should be created
      create: true

      automountServiceAccountToken: true

    securePort: 10260

    hostNetwork: false

    serviceType: ClusterIP

    url: {}
      # host:

  cainjector:
    enabled: true
    replicaCount: 1

    strategy: {}

    securityContext:
      runAsNonRoot: true

    containerSecurityContext:
      allowPrivilegeEscalation: false

    extraArgs: []

    resources: {}

    nodeSelector:
      kubernetes.io/os: linux

    affinity: {}

    tolerations: []

    podLabels: {}

    image:
      repository: quay.io/jetstack/cert-manager-cainjector
      pullPolicy: IfNotPresent

    serviceAccount:
      create: true
      automountServiceAccountToken: true

  startupapicheck:
    enabled: true

    securityContext:
      runAsNonRoot: true

    containerSecurityContext:
      allowPrivilegeEscalation: false

    timeout: 1m

    # Job backoffLimit
    backoffLimit: 4

    # Optional additional annotations to add to the startupapicheck Job
    jobAnnotations:
      helm.sh/hook: post-install
      helm.sh/hook-weight: "1"
      helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded

    extraArgs: []

    resources: {}

    nodeSelector: {}

    affinity: {}

    tolerations: []

    podLabels: {}

    image:
      repository: quay.io/jetstack/cert-manager-ctl
      pullPolicy: IfNotPresent

    rbac:
      annotations:
        helm.sh/hook: post-install
        helm.sh/hook-weight: "-5"
        helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded

    serviceAccount:
      create: true

      annotations:
        helm.sh/hook: post-install
        helm.sh/hook-weight: "-5"
        helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded

      automountServiceAccountToken: true
