# ---------------------
# dp_proxy.conf
# ---------------------

server {
    listen 8888;
    location /nginx_status {
      stub_status on;
      access_log  off;
      allow       127.0.0.1;
      deny        all;
    }
}

server {                                                                                
    listen       80;                                                                    
    server_name  localhost;                                                             
                                                                                        
    #charset koi8-r;                                                                    
    #access_log  /var/log/nginx/log/host.access.log  main;                              
                                                                                        
    location / {                                                                        
        root   /usr/share/nginx/html;                                                   
        index  index.html index.htm;                                                    
    }                                                                                   
                                                                                        
    #error_page  404              /404.html;                                            
                                                                                        
    # redirect server error pages to the static page /50x.html                          
    #                                                                                   
    error_page   500 502 503 504  /50x.html;                                            
    location = /50x.html {                                                              
        root   /usr/share/nginx/html;                                                   
    }                                                                                   
                                                                                        
    # proxy the PHP scripts to Apache listening on 127.0.0.1:80                         
    #                                                                                   
    #location ~ \.php$ {                                                                
    #    proxy_pass   http://127.0.0.1;                                                 
    #}                                                                                  
                                                                                        
    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000                
    #                                                                                   
    #location ~ \.php$ {                                                                
    #    root           html;                                                           
    #    fastcgi_pass   127.0.0.1:9000;                                                 
    #    fastcgi_index  index.php;                                                      
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;                  
    #    include        fastcgi_params;                                                 
    #}                                                                                  
                                                                                        
    # deny access to .htaccess files, if Apache's document root                         
    # concurs with nginx's one                                                          
    #                                                                                   
    #location ~ /\.ht {                                                                 
    #    deny  all;                                                                     
    #}                                                                                  
}

map $at_limit_key $at_limit_key {
                default 'atlimit';
}

map $dr_limit_key $dr_limit_key {
                default 'drlimit';
}                  

#resolver kube-dns.kube-system.svc.cluster.local  valid=10s;
resolver kube-dns.kube-system.svc.cluster.local  valid=10s;

limit_req_zone $at_limit_key zone=atlimit:10m rate=333r/s;
limit_req_zone $dr_limit_key zone=drlimit:10m rate=1r/s;


#t-h-m-dp:443   
proxy_cache_path /tmp/otacache keys_zone=otacache:10m  use_temp_path=off inactive=432000s max_size=10G;
server {                                                                                
        listen       30012 ssl;
        sendfile_max_chunk 1385;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
        add_header Content-Security-Policy "default-src 'self';";
        add_header X-Content-Type-Options nosniff;
        set $nginx_bucket "";
        set $nginx_access_key "";
        set $nginx_secret_key "";
        #set $upstream_endpoint  http://dp-service-gateway:30003;
        set $dp_service_gateway_proxy_url  dp-service-gateway.dp.svc.cluster.local;
        
        ssl_certificate        /etc/nginx/ssl/general/cert.pem;
        ssl_certificate_key    /etc/nginx/ssl/general/key.pem;
        ssl_client_certificate /etc/nginx/ssl/general/ca.pem;
        ssl_verify_client      optional;  
        ssl_verify_depth       3;
        ssl_protocols  TLSv1.2 TLSv1.3;
        
        # Enable OCSP Stapling
        ssl_trusted_certificate /etc/nginx/ssl/general/cert.pem;
        ssl_stapling on;     
        ssl_stapling_verify on;
        
        lua_need_request_body on;
        #set $resp_body "";
        #body_filter_by_lua '
        #  local resp_body = string.sub(ngx.arg[1], 1, 1000)
        #  ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
        #  if ngx.arg[2] then
        #     ngx.var.resp_body = ngx.ctx.buffered
        #  end
        #';
        
        set $req_header "";
        set $resp_header "";
        header_filter_by_lua ' 
          local h = ngx.req.get_headers()
          for k, v in pairs(h) do
              ngx.var.req_header = ngx.var.req_header .. k.."="..v.." "
          end
          local rh = ngx.resp.get_headers()
          for k, v in pairs(rh) do
              ngx.var.resp_header = ngx.var.resp_header .. k.."="..v.." "
          end
        ';
       
                location ~ /s3/ {
                         access_log  /var/log/nginx/access.log logger-json-log-no-body;
                          
                         rewrite ^/s3/(.*)$ /$1? break;
                         
                         #--------------------------------------
                         proxy_cache otacache;
                         proxy_cache_valid   200 43200m;      
                         proxy_cache_lock on;          
                         proxy_cache_lock_timeout 60s;
                         proxy_cache_lock_age 180s;            
                         proxy_cache_use_stale updating;
                         # When the conversion is disabled, the cache key should be configured to include the $request_method
                         proxy_cache_convert_head off;
                         # proxy_cache_key "$host$proxy_host$request_uri$request_method";
                         proxy_cache_key "$scheme$proxy_host$uri$request_method";
                         #-------------------------------------
                                                     
                         #proxy_pass https://$nginx_bucket.s3.amazonaws.com/$1;
                         proxy_pass https://integration-image-store.s3.amazonaws.com/$1;
                         
                         aws_access_key AKIAYWMS4C6BZUWLFFXM;
                         aws_key_scope 20250619/us-west-2/s3/aws4_request;  # Update this weekly with the actual signing date
                         aws_signing_key tawf7UkpQvdpJT/nqZxB9HFbmHLqvsaMyGigmJ8On4w=;  # generated using the signing script
                         aws_s3_bucket integration-image-store;
                         aws_sign;
                          }
                        
                #proxy pass to DP Kong
                location / {
                 
                 set_by_lua $ssl_client_s_dn_c_compat '
                    local x509 = require "resty.openssl.x509"
                
                    local raw_cert = ngx.var.ssl_client_raw_cert
                    if raw_cert and raw_cert ~= "" then
                        -- Normalize the certificate formatting
                        raw_cert = raw_cert
                            :gsub("\\n", "\n")  -- convert escaped newlines
                            :gsub(" +", " ")    -- normalize whitespace (optional)
                
                        -- Load the certificate directly from the PEM string
                        local cert, err = x509.new(raw_cert)
                        if not cert then
                            ngx.log(ngx.ERR, "Failed to read certificate: ", err)
                            return "error reading certificate"
                        end
                
                        -- Retrieve subject and find CN
                        local subject = cert:subject()
                        local cn = subject:oneline():match("/CN=([^/]+)")
                        if cn then
                            return cn
                        else
                            return "CN not found in subject"
                        end
                    end
                
                    return "missing client certificate"
                ';
            
                         limit_req zone=atlimit burst=19979 nodelay;
                         proxy_set_header AMP-AUTH-CLIENTCERTDN $ssl_client_s_dn_c_compat;
                         proxy_set_header X-Forwarded-Proto $scheme;
                         proxy_http_version 1.1;
                         proxy_set_header Upgrade $http_upgrade;
                         proxy_set_header Connection "upgrade";
                         proxy_set_header Host $host;
                         #proxy_pass http://dp-service-gateway:30003;
                         #proxy_pass http://dp-service-gateway:30003;
                         #proxy_pass $upstream_endpoint;
                         proxy_pass http://$dp_service_gateway_proxy_url:30003$request_uri;
                }
                location /test/v1/oauth2/token {     
                         limit_req zone=atlimit burst=19979 nodelay;
                         proxy_set_header X-Forwarded-Proto $scheme;
                         proxy_http_version 1.1;
                         proxy_set_header Upgrade $http_upgrade;
                         proxy_set_header Connection "upgrade";
                         proxy_set_header Host $host;
                         proxy_pass http://$dp_service_gateway_proxy_url:30003/v1/oauth2/token;
                }                    
        }  


#t-h-m.dp:15443  
server {                                                                                
        listen       30013 ssl;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
        add_header Content-Security-Policy "default-src 'self';";
        add_header X-Content-Type-Options nosniff;
        #set $upstream_endpoint  http://dp-service-gateway:30003;
        set $dp_service_gateway_proxy_url  dp-service-gateway.dp.svc.cluster.local;
       
        ssl_certificate        /etc/nginx/ssl/deviceRegister/cert.pem;
        ssl_certificate_key    /etc/nginx/ssl/deviceRegister/key.pem;
        ssl_client_certificate /etc/nginx/ssl/deviceRegister/ca.pem;
        ssl_verify_client      on;  
        ssl_verify_depth       3; 
        ssl_protocols  TLSv1.2 TLSv1.3;

        # Enable OCSP Stapling
        ssl_trusted_certificate /etc/nginx/ssl/deviceRegister/cert.pem;
        ssl_stapling on;     
        ssl_stapling_verify on;
        
        lua_need_request_body on;
        set $resp_body "";
        body_filter_by_lua '
          local resp_body = string.sub(ngx.arg[1], 1, 1000)
          ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
          if ngx.arg[2] then
             ngx.var.resp_body = ngx.ctx.buffered
          end
        ';
        
        set $req_header "";
        set $resp_header "";
        header_filter_by_lua ' 
          local h = ngx.req.get_headers()
          for k, v in pairs(h) do
              ngx.var.req_header = ngx.var.req_header .. k.."="..v.." "
          end
          local rh = ngx.resp.get_headers()
          for k, v in pairs(rh) do
              ngx.var.resp_header = ngx.var.resp_header .. k.."="..v.." "
          end
        ';
        
                location /vas/vehicles/v2/deviceRegistered {
                    # Generate request ID if not exists
                    set $req_id $request_id;
                    if ($req_id = "") {
                        set $req_id $pid-$msec;
                    }

                    set_by_lua_block $ssl_client_s_dn_c_compat {
                        local req_id = ngx.var.req_id
                        
                        -- Debug logging start
                        ngx.log(ngx.ERR, "[", req_id, "] === Starting Certificate Processing ===")
                        
                        -- Use SSL Client DN directly
                        local ssl_client_s_dn = ngx.var.ssl_client_s_dn
                        ngx.log(ngx.ERR, "[", req_id, "] SSL Client DN: ", ssl_client_s_dn)
                        
                        if ssl_client_s_dn then
                            local cn = ssl_client_s_dn:match("CN=([^,]+)")
                            if cn then
                                ngx.log(ngx.ERR, "[", req_id, "] Found CN: ", cn)
                                return cn
                            end
                            ngx.log(ngx.ERR, "[", req_id, "] CN not found in SSL Client DN")
                            return "CN not found in subject"
                        end
                        
                        ngx.log(ngx.ERR, "[", req_id, "] No SSL Client DN available")
                        return "missing client certificate"
                    }
                    
                    # Add debug headers in response
                    add_header X-Debug-RequestID $req_id;
                    add_header X-Debug-ClientCertDN $ssl_client_s_dn_c_compat;
                    add_header X-Debug-SSLClientDN $ssl_client_s_dn;
                    
                    # Original configuration
                    limit_req zone=drlimit burst=120 nodelay;
                    
                    # Add debug headers to upstream request
                    proxy_set_header X-Request-ID $req_id;
                    proxy_set_header AMP-AUTH-CLIENTCERTDN $ssl_client_s_dn_c_compat;
                    proxy_set_header X-Original-URI $request_uri;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_set_header X-Debug-Headers-Sent "true";
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                    
                    # Log headers being sent to upstream
                    log_by_lua_block {
                        local req_id = ngx.var.req_id
                        ngx.log(ngx.ERR, "[", req_id, "] Sending to upstream - AMP-AUTH-CLIENTCERTDN: ", 
                                ngx.var.ssl_client_s_dn_c_compat)
                    }
                    
                    # Keeping all proxy_pass options for reference
                    #proxy_pass http://dp-service-gateway:30003/vas/vehicles/v2/deviceRegistered;
                    #proxy_pass http://dp-service-gateway:30003/vas/vehicles/v2/deviceRegistered;
                    #proxy_pass $upstream_endpoint/vas/vehicles/v2/deviceRegistered;
                    proxy_pass http://$dp_service_gateway_proxy_url:30003$request_uri;
                }
                location /test/vas/vehicles/v2/deviceRegistered {     
                         limit_req zone=drlimit burst=120 nodelay;
                         proxy_set_header X-Forwarded-Proto $scheme;
                         proxy_http_version 1.1;
                         proxy_set_header Upgrade $http_upgrade;
                         proxy_set_header Connection "upgrade";
                         proxy_set_header Host $host;
                         #proxy_pass http://dp-service-gateway:30003/vas/vehicles/v2/deviceRegistered;
                         proxy_pass http://dp-service-gateway:30003/vas/vehicles/v2/deviceRegistered;
                         #proxy_pass $upstream_endpoint/vas/vehicles/v2/deviceRegistered;
                } 

                location /glcs/vehicles/v2/deviceRegistered {
                
                set_by_lua $ssl_client_s_dn_c_compat '
                    local x509 = require "resty.openssl.x509"
                
                    local raw_cert = ngx.var.ssl_client_raw_cert
                    if raw_cert and raw_cert ~= "" then
                        -- Normalize the certificate formatting
                        raw_cert = raw_cert
                            :gsub("\\n", "\n")  -- convert escaped newlines
                            :gsub(" +", " ")    -- normalize whitespace (optional)
                
                        -- Load the certificate directly from the PEM string
                        local cert, err = x509.new(raw_cert)
                        if not cert then
                            ngx.log(ngx.ERR, "Failed to read certificate: ", err)
                            return "error reading certificate"
                        end
                
                        -- Retrieve subject and find CN
                        local subject = cert:subject()
                        local cn = subject:oneline():match("/CN=([^/]+)")
                        if cn then
                            return cn
                        else
                            return "CN not found in subject"
                        end
                    end
                
                    return "missing client certificate"
                ';
                  
                         limit_req zone=drlimit burst=120 nodelay;
                         proxy_set_header AMP-AUTH-CLIENTCERTDN $ssl_client_s_dn_c_compat;
                         proxy_set_header X-Forwarded-Proto $scheme;
                         proxy_http_version 1.1;
                         proxy_set_header Upgrade $http_upgrade;
                         proxy_set_header Connection "upgrade";
                         proxy_set_header Host $host;
                         proxy_pass http://$dp_service_gateway_proxy_url:30003$request_uri;
                }
        }